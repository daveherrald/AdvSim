{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "",
            "description": "",
            "hash": "73bfac4a860aa8752cc379eae097d5b336feb535",
            "joint": {
                "cells": [
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'format_1' block\n    format_1(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "90dd9150-5f28-4f6b-80fb-04a2a7ef641e",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 16,
                        "line_start": 8,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 100,
                            "y": 140
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "state": "start",
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 1
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all detals of actions \n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "write ended event",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "24c47fc4-f8f4-485e-bc1f-15be589d7bc4",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 256,
                        "line_start": 243,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1660,
                            "y": 140
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "state": "end",
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 2
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "4dc193f1-805b-4b30-9349-0b3f57747304",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "71f118b1-449a-4e57-aad0-fe4d24e25923",
                            "port": "out-1",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "8891b45a-715a-40e7-863f-8dc1be3ef024",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 12
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "4651e176-066f-4ea7-bf4a-37bcac8574e4",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "71f118b1-449a-4e57-aad0-fe4d24e25923",
                            "port": "out-2",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "93fa5b71-e7df-4e5a-a5ee-9d97082b2c39",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 15
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "940565b0-14a8-4035-9512-8c8a9b3a5fb1",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "90dd9150-5f28-4f6b-80fb-04a2a7ef641e",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d6141597-15a3-451a-ae6c-79bd83d15550",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 21
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ca77dad4-b6c1-4e8f-b11a-c021efca928c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d6141597-15a3-451a-ae6c-79bd83d15550",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d10b425d-717c-478a-8fe3-c484a18ff770",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 26
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "15f2a83a-1857-4d3f-bcbb-d2dcd708a951",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d10b425d-717c-478a-8fe3-c484a18ff770",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "71f118b1-449a-4e57-aad0-fe4d24e25923",
                            "port": "in",
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 28
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ba8aef9f-d378-43ff-a444-fb0870ac1ff3",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "8891b45a-715a-40e7-863f-8dc1be3ef024",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4607ee03-c437-4903-9d01-cbff02ae611d",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 35
                    },
                    {
                        "action": "run script",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "async": "",
                            "command_id": "",
                            "ip_hostname": "artifact:*.cef.destinationAddress",
                            "parser": "",
                            "script_file": "",
                            "script_str": "format_1:formatted_data",
                            "shell_id": ""
                        },
                        "angle": 0,
                        "app": "Windows Remote Management",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run script",
                                "active": true,
                                "app_name": "Windows Remote Management",
                                "app_version": "1.0.12",
                                "config_type": "app",
                                "fields": {
                                    "async": "",
                                    "command_id": "",
                                    "ip_hostname": "artifact:*.cef.destinationAddress",
                                    "parser": "",
                                    "script_file": "",
                                    "script_str": "format_1:formatted_data",
                                    "shell_id": ""
                                },
                                "has_app": true,
                                "id": 128,
                                "loaded": false,
                                "missing": false,
                                "name": "Windows Remote Management",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.async",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.parameter.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.parser",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.script_file",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.script_str",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.parameter.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_err",
                                        "data_type": "string",
                                        "example_values": [
                                            "Error message"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_out",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successful output"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.summary.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.summary.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 0,
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "async": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Start the command, but don't wait for output",
                                        "key": "async",
                                        "order": 4,
                                        "required": false
                                    },
                                    "command_id": {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Command ID of async command (Provide with shell_id)",
                                        "key": "command_id",
                                        "order": 5,
                                        "primary": true,
                                        "required": false
                                    },
                                    "ip_hostname": {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP/Hostname",
                                        "key": "ip_hostname",
                                        "order": 0,
                                        "required": true
                                    },
                                    "parser": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a custom parser to use for output",
                                        "key": "parser",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_file": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a PowerShell script to run",
                                        "key": "script_file",
                                        "order": 1,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_str": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "A PowerShell script to run",
                                        "key": "script_str",
                                        "order": 2,
                                        "primary": true,
                                        "required": false
                                    },
                                    "shell_id": {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Shell ID of async command (Provide with command_id)",
                                        "key": "shell_id",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Windows Remote Management",
                                "product_vendor": "Microsoft",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "write started event"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def write_started_event(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('write_started_event() called')\n\n    # collect data for 'write_started_event' call\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.destinationAddress', 'artifact:*.id'])\n    formatted_data_1 = phantom.get_format_data(name='format_1')\n\n    parameters = []\n    \n    # build parameters list for 'write_started_event' call\n    for container_item in container_data:\n        if container_item[0]:\n            parameters.append({\n                'ip_hostname': container_item[0],\n                'script_file': \"\",\n                'script_str': formatted_data_1,\n                'parser': \"\",\n                'async': \"\",\n                'command_id': \"\",\n                'shell_id': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': container_item[1]},\n            })\n\n    phantom.act(\"run script\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=decision_1, name=\"write_started_event\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "write started event",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d10b425d-717c-478a-8fe3-c484a18ff770",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 153,
                        "line_start": 125,
                        "message": "Configuring now",
                        "name": "run script",
                        "notes": "",
                        "number": 2,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 500,
                            "y": 120
                        },
                        "previous_function": "",
                        "previous_name": "write_started_event",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": "",
                        "z": 37
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".format": {
                                "text": "format 1"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def format_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_1() called')\n    \n    template = \"\"\"eventcreate /id 999 /D \\\"started test for {0}\\\" /T INFORMATION /L application\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"artifact:*.cef.destinationAddress\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_1\")\n\n    write_started_event(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d6141597-15a3-451a-ae6c-79bd83d15550",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 125,
                        "line_start": 109,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 1,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "artifact:*.cef.destinationAddress"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 260,
                            "y": 120
                        },
                        "previous_function": "",
                        "previous_name": "format_1",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "eventcreate /id 999 /D \"started test for {0}\" /T INFORMATION /L application",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 39
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6071b2c3-e5ff-4b90-9cbf-19659acce3dc",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4607ee03-c437-4903-9d01-cbff02ae611d",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "21ef810d-17ff-4190-a30b-49982453db83",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 41
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "eb879477-97d9-44fe-aa8a-3894e252676c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "93fa5b71-e7df-4e5a-a5ee-9d97082b2c39",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4607ee03-c437-4903-9d01-cbff02ae611d",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 44
                    },
                    {
                        "action": "run script",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "async": "",
                            "command_id": "",
                            "ip_hostname": "write_started_event:action_result.parameter.ip_hostname",
                            "parser": "",
                            "script_file": "",
                            "script_str": "",
                            "shell_id": ""
                        },
                        "angle": 0,
                        "app": "Windows Remote Management",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run script",
                                "active": true,
                                "app_name": "Windows Remote Management",
                                "app_version": "1.0.12",
                                "config_type": "app",
                                "fields": {
                                    "async": "",
                                    "command_id": "",
                                    "ip_hostname": "write_started_event:action_result.parameter.ip_hostname",
                                    "parser": "",
                                    "script_file": "",
                                    "script_str": "",
                                    "shell_id": ""
                                },
                                "has_app": true,
                                "id": 128,
                                "loaded": false,
                                "missing": false,
                                "name": "Windows Remote Management",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.async",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.parameter.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.parser",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.script_file",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.script_str",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.parameter.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_err",
                                        "data_type": "string",
                                        "example_values": [
                                            "Error message"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_out",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successful output"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.summary.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.summary.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 0,
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "async": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Start the command, but don't wait for output",
                                        "key": "async",
                                        "order": 4,
                                        "required": false
                                    },
                                    "command_id": {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Command ID of async command (Provide with shell_id)",
                                        "key": "command_id",
                                        "order": 5,
                                        "primary": true,
                                        "required": false
                                    },
                                    "ip_hostname": {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP/Hostname",
                                        "key": "ip_hostname",
                                        "order": 0,
                                        "required": true
                                    },
                                    "parser": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a custom parser to use for output",
                                        "key": "parser",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_file": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a PowerShell script to run",
                                        "key": "script_file",
                                        "order": 1,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_str": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "A PowerShell script to run",
                                        "key": "script_str",
                                        "order": 2,
                                        "primary": true,
                                        "required": false
                                    },
                                    "shell_id": {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Shell ID of async command (Provide with command_id)",
                                        "key": "shell_id",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Windows Remote Management",
                                "product_vendor": "Microsoft",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "write ended event"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def write_ended_event(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('write_ended_event() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'write_ended_event' call\n    results_data_1 = phantom.collect2(container=container, datapath=['write_started_event:action_result.parameter.ip_hostname', 'write_started_event:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'write_ended_event' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'ip_hostname': results_item_1[0],\n                'script_file': \"\",\n                'script_str': \"\",\n                'parser': \"\",\n                'async': \"\",\n                'command_id': \"\",\n                'shell_id': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(\"run script\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, name=\"write_ended_event\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "powershell test, cmd test, run supplied command",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "write ended event",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "21ef810d-17ff-4190-a30b-49982453db83",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 212,
                        "line_start": 183,
                        "message": "Configuring now",
                        "name": "run script",
                        "notes": "",
                        "number": 3,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1420,
                            "y": 120
                        },
                        "previous_function": "",
                        "previous_name": "write_ended_event",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": "",
                        "z": 45
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c378b2f1-3c55-436d-a257-d1a1f4632c92",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "21ef810d-17ff-4190-a30b-49982453db83",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "24c47fc4-f8f4-485e-bc1f-15be589d7bc4",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 46
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "432f62ad-af03-4341-ae33-ac9e3c7b9f16",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "71f118b1-449a-4e57-aad0-fe4d24e25923",
                            "port": "out-3",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(3) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "dae33605-8d09-4498-b004-989cd7dc6d58",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 47
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#6C7A89",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#6a6c8a",
                                "stroke": "#6a6c8a"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a422693a-874c-4e03-93b3-79df88f77096",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "dae33605-8d09-4498-b004-989cd7dc6d58",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4607ee03-c437-4903-9d01-cbff02ae611d",
                            "port": null,
                            "selector": "g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 50
                    },
                    {
                        "action": "run command",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "arguments": "",
                            "async": "",
                            "command": "artifact:*.cef.command",
                            "command_id": "",
                            "ip_hostname": "write_started_event:action_result.parameter.ip_hostname",
                            "parser": "",
                            "shell_id": ""
                        },
                        "angle": 0,
                        "app": "Windows Remote Management",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run command",
                                "active": true,
                                "app_name": "Windows Remote Management",
                                "app_version": "1.0.12",
                                "config_type": "app",
                                "fields": {
                                    "arguments": "",
                                    "async": "",
                                    "command": "artifact:*.cef.command",
                                    "command_id": "",
                                    "ip_hostname": "write_started_event:action_result.parameter.ip_hostname",
                                    "parser": "",
                                    "shell_id": ""
                                },
                                "has_app": true,
                                "id": 128,
                                "loaded": false,
                                "missing": false,
                                "name": "Windows Remote Management",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.arguments",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.async",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "data_path": "action_result.parameter.command",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.parameter.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.parser",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.parameter.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_err",
                                        "data_type": "string",
                                        "example_values": [
                                            "Error message"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_out",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successful output"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.summary.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.summary.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 0,
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "arguments": {
                                        "data_type": "string",
                                        "default": "",
                                        "description": "The arguments for the command",
                                        "key": "arguments",
                                        "order": 2,
                                        "required": false
                                    },
                                    "async": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Start the command, but don't wait for output",
                                        "key": "async",
                                        "order": 4,
                                        "required": false
                                    },
                                    "command": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The command to be run",
                                        "key": "command",
                                        "order": 1,
                                        "required": false
                                    },
                                    "command_id": {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Command ID of async command (Provide with shell_id)",
                                        "key": "command_id",
                                        "order": 5,
                                        "primary": true,
                                        "required": false
                                    },
                                    "ip_hostname": {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP/Hostname",
                                        "key": "ip_hostname",
                                        "order": 0,
                                        "required": true
                                    },
                                    "parser": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a custom parser to use for output",
                                        "key": "parser",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "shell_id": {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Shell ID of async command (Provide with command_id)",
                                        "key": "shell_id",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Windows Remote Management",
                                "product_vendor": "Microsoft",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "run supplied command"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def run_supplied_command(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('run_supplied_command() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'run_supplied_command' call\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.command', 'artifact:*.id'])\n    results_data_1 = phantom.collect2(container=container, datapath=['write_started_event:action_result.parameter.ip_hostname', 'write_started_event:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'run_supplied_command' call\n    for container_item in container_data:\n        for results_item_1 in results_data_1:\n            if results_item_1[0]:\n                parameters.append({\n                    'ip_hostname': results_item_1[0],\n                    'command': container_item[0],\n                    'arguments': \"\",\n                    'parser': \"\",\n                    'async': \"\",\n                    'command_id': \"\",\n                    'shell_id': \"\",\n                    # context (artifact id) is added to associate results with the artifact\n                    'context': {'artifact_id': results_item_1[1]},\n                })\n\n    phantom.act(\"run command\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=join_format_2, name=\"run_supplied_command\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "write started event",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "run supplied command",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "dae33605-8d09-4498-b004-989cd7dc6d58",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 243,
                        "line_start": 212,
                        "message": "Configuring now",
                        "name": "run command",
                        "notes": "",
                        "number": 2,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 880,
                            "y": 0
                        },
                        "previous_function": "",
                        "previous_name": "run_supplied_command",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": "",
                        "z": 55
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-2": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": -2
                            },
                            ".outPorts>.port-2>.port-body": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def decision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('decision_1() called')\n\n    # check for 'if' condition 1\n    matched_artifacts_1, matched_results_1 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.test_id\", \"in\", \"custom_list:Test Matrix\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched_artifacts_1 or matched_results_1:\n        powershell_test(action=action, success=success, container=container, results=results, handle=handle)\n        return\n\n    # check for 'elif' condition 2\n    matched_artifacts_2, matched_results_2 = phantom.condition(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"artifact:*.cef.test_id\", \"in\", \"custom_list:Test Matrix\"],\n        ])\n\n    # call connected blocks if condition 2 matched\n    if matched_artifacts_2 or matched_results_2:\n        cmd_test(action=action, success=success, container=container, results=results, handle=handle)\n        return\n\n    # call connected blocks for 'else' condition 3\n    run_supplied_command(action=action, success=success, container=container, results=results, handle=handle)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "write started event",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def decision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('decision_1() called')\n\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.test_id', 'artifact:*.id'])\n    phantom.debug(container_data)\n    tests_to_run = []\n    for each_item in container_data:\n        success, message, test_rows = phantom.get_list(list_name='Test Matrix', values=each_item[0])\n        phantom.debug(\n            'phantom.get_list results: success: {}, message: {}, execs: {}'.format(success, message, test_rows))\n        for match in test_rows['matches']:\n            tests_to_run.append(match['value'])\n    phantom.debug(tests_to_run)\n    \n    if tests_to_run != []:\n        for each_test in tests_to_run:\n            # call connected blocks if condition 1 matched\n            handle = each_test[1]\n            if each_test[2] == 'powershell':\n                powershell_test(action=action, success=success, container=container, results=results, handle=handle)\n                return\n\n            # check for 'elif' condition 2\n            elif each_test[2] == 'cmd': \n                cmd_test(action=action, success=success, container=container, results=results, handle=handle)\n                return\n\n    else:\n        # call connected blocks for 'else' condition 3\n        run_supplied_command(action=action, success=success, container=container, results=results, handle=handle)\n    \n    return",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "71f118b1-449a-4e57-aad0-fe4d24e25923",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 49,
                        "line_start": 16,
                        "name": "decision",
                        "notes": "",
                        "number": 1,
                        "outPorts": [
                            "out-1",
                            "out-2",
                            "out-3"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.test_id",
                                        "value": "custom_list:Test Matrix"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "artifact:*.cef.test_id",
                                        "value": "custom_list:Test Matrix"
                                    }
                                ],
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 740,
                            "y": 120
                        },
                        "previous_function": "",
                        "previous_name": "decision_1",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": false,
                        "z": 60
                    },
                    {
                        "action": "run command",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "arguments": "",
                            "async": "",
                            "command": "",
                            "command_id": "",
                            "ip_hostname": "artifact:*.cef.destinationAddress",
                            "parser": "",
                            "shell_id": ""
                        },
                        "angle": 0,
                        "app": "Windows Remote Management",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run command",
                                "active": true,
                                "app_name": "Windows Remote Management",
                                "app_version": "1.0.12",
                                "config_type": "app",
                                "fields": {
                                    "arguments": "",
                                    "async": "",
                                    "command": "",
                                    "command_id": "",
                                    "ip_hostname": "artifact:*.cef.destinationAddress",
                                    "parser": "",
                                    "shell_id": ""
                                },
                                "has_app": true,
                                "id": 128,
                                "loaded": false,
                                "missing": false,
                                "name": "Windows Remote Management",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.arguments",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.async",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "data_path": "action_result.parameter.command",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.parameter.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.parser",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.parameter.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_err",
                                        "data_type": "string",
                                        "example_values": [
                                            "Error message"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_out",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successful output"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.summary.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.summary.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 0,
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "arguments": {
                                        "data_type": "string",
                                        "default": "",
                                        "description": "The arguments for the command",
                                        "key": "arguments",
                                        "order": 2,
                                        "required": false
                                    },
                                    "async": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Start the command, but don't wait for output",
                                        "key": "async",
                                        "order": 4,
                                        "required": false
                                    },
                                    "command": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The command to be run",
                                        "key": "command",
                                        "order": 1,
                                        "required": false
                                    },
                                    "command_id": {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Command ID of async command (Provide with shell_id)",
                                        "key": "command_id",
                                        "order": 5,
                                        "primary": true,
                                        "required": false
                                    },
                                    "ip_hostname": {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP/Hostname",
                                        "key": "ip_hostname",
                                        "order": 0,
                                        "required": true
                                    },
                                    "parser": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a custom parser to use for output",
                                        "key": "parser",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "shell_id": {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Shell ID of async command (Provide with command_id)",
                                        "key": "shell_id",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Windows Remote Management",
                                "product_vendor": "Microsoft",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "cmd test"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.code image": {
                                "xlink:href": "/inc/coa/img/block_icon_code_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def cmd_test(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('cmd_test() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'cmd_test' call\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.destinationAddress', 'artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'cmd_test' call\n    for container_item in container_data:\n        if container_item[0]:\n            parameters.append({\n                'ip_hostname': container_item[0],\n                'command': \"\",\n                'arguments': \"\",\n                'parser': \"\",\n                'async': \"\",\n                'command_id': \"\",\n                'shell_id': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': container_item[1]},\n            })\n\n    phantom.act(\"run command\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=join_format_2, name=\"cmd_test\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "write started event",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def cmd_test(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('cmd_test() called')\n    phantom.debug(handle)\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'cmd_test' call\n    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.destinationAddress', 'artifact:*.id'])\n\n    parameters = []\n    \n    # build parameters list for 'cmd_test' call\n    for container_item in container_data:\n        if container_item[0]:\n            parameters.append({\n                'ip_hostname': container_item[0],\n                'command': handle.split(' ', 1)[0],\n                'arguments': handle.split(' ', 1)[1],\n                'parser': \"\",\n                'async': \"\",\n                'command_id': \"\",\n                'shell_id': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': container_item[1]},\n            })\n\n    phantom.act(\"run command\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=join_format_2, name=\"cmd_test\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "cmd test",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "93fa5b71-e7df-4e5a-a5ee-9d97082b2c39",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 109,
                        "line_start": 79,
                        "message": "Configuring now",
                        "name": "run command",
                        "notes": "",
                        "number": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 880,
                            "y": 240
                        },
                        "previous_function": "",
                        "previous_name": "cmd_test",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 62
                    },
                    {
                        "action": "run script",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "async": "",
                            "command_id": "",
                            "ip_hostname": "write_started_event:action_result.parameter.ip_hostname",
                            "parser": "",
                            "script_file": "",
                            "script_str": "",
                            "shell_id": ""
                        },
                        "angle": 0,
                        "app": "Windows Remote Management",
                        "approver": "",
                        "assets": [
                            {
                                "action": "run script",
                                "active": true,
                                "app_name": "Windows Remote Management",
                                "app_version": "1.0.12",
                                "config_type": "app",
                                "fields": {
                                    "async": "",
                                    "command_id": "",
                                    "ip_hostname": "write_started_event:action_result.parameter.ip_hostname",
                                    "parser": "",
                                    "script_file": "",
                                    "script_str": "",
                                    "shell_id": ""
                                },
                                "has_app": true,
                                "id": 128,
                                "loaded": false,
                                "missing": false,
                                "name": "Windows Remote Management",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.async",
                                        "data_type": "boolean"
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.parameter.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_path": "action_result.parameter.ip_hostname",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.parser",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_path": "action_result.parameter.script_file",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.parameter.script_str",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.parameter.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.status_code",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_err",
                                        "data_type": "string",
                                        "example_values": [
                                            "Error message"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.std_out",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successful output"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_path": "action_result.summary.command_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_path": "action_result.summary.shell_id",
                                        "data_type": "string"
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 0,
                                        "data_path": "action_result.message",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric"
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric"
                                    }
                                ],
                                "parameters": {
                                    "async": {
                                        "data_type": "boolean",
                                        "default": false,
                                        "description": "Start the command, but don't wait for output",
                                        "key": "async",
                                        "order": 4,
                                        "required": false
                                    },
                                    "command_id": {
                                        "contains": [
                                            "winrm command id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Command ID of async command (Provide with shell_id)",
                                        "key": "command_id",
                                        "order": 5,
                                        "primary": true,
                                        "required": false
                                    },
                                    "ip_hostname": {
                                        "contains": [
                                            "ip",
                                            "host name"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP/Hostname",
                                        "key": "ip_hostname",
                                        "order": 0,
                                        "required": true
                                    },
                                    "parser": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a custom parser to use for output",
                                        "key": "parser",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_file": {
                                        "contains": [
                                            "vault id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "The vault ID of a PowerShell script to run",
                                        "key": "script_file",
                                        "order": 1,
                                        "primary": true,
                                        "required": false
                                    },
                                    "script_str": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "A PowerShell script to run",
                                        "key": "script_str",
                                        "order": 2,
                                        "primary": true,
                                        "required": false
                                    },
                                    "shell_id": {
                                        "contains": [
                                            "winrm shell id"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Shell ID of async command (Provide with command_id)",
                                        "key": "shell_id",
                                        "order": 6,
                                        "required": false
                                    }
                                },
                                "product_name": "Windows Remote Management",
                                "product_vendor": "Microsoft",
                                "type": ""
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "powershell test"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.code image": {
                                "xlink:href": "/inc/coa/img/block_icon_code_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def powershell_test(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('powershell_test() called')\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'powershell_test' call\n    results_data_1 = phantom.collect2(container=container, datapath=['write_started_event:action_result.parameter.ip_hostname', 'write_started_event:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'powershell_test' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'ip_hostname': results_item_1[0],\n                'script_file': \"\",\n                'script_str': \"\",\n                'parser': \"\",\n                'async': \"\",\n                'command_id': \"\",\n                'shell_id': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(\"run script\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=join_format_2, name=\"powershell_test\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "write started event",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def powershell_test(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('powershell_test() called')\n    phantom.debug(handle)\n    \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'powershell_test' call\n    results_data_1 = phantom.collect2(container=container, datapath=['write_started_event:action_result.parameter.ip_hostname', 'write_started_event:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'powershell_test' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'ip_hostname': results_item_1[0],\n                'script_file': \"\",\n                'script_str': handle,\n                'parser': \"\",\n                'async': \"\",\n                'command_id': \"\",\n                'shell_id': \"\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(\"run script\", parameters=parameters, app={ \"name\": 'Windows Remote Management' }, callback=join_format_2, name=\"powershell_test\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "powershell test",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "8891b45a-715a-40e7-863f-8dc1be3ef024",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 79,
                        "line_start": 49,
                        "message": "Configuring now",
                        "name": "run script",
                        "notes": "",
                        "number": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 880,
                            "y": 120
                        },
                        "previous_function": "",
                        "previous_name": "powershell_test",
                        "required_params": {
                            "ip_hostname": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_config",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 63
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".format": {
                                "text": "format 2"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out-1": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out-1>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "format"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def format_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('format_2() called')\n    \n    template = \"\"\"eventcreate /id 999 /D \\\"ended test for {0}\\\" /T INFORMATION /L application\"\"\"\n\n    # parameter list for template variable replacement\n    parameters = [\n        \"artifact:*.cef.destinationAddress\",\n    ]\n\n    phantom.format(container=container, template=template, parameters=parameters, name=\"format_2\")\n\n    write_ended_event(container=container)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "powershell test, cmd test, run supplied command",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "format": "format",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4607ee03-c437-4903-9d01-cbff02ae611d",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_format_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None):\n    phantom.debug('join_format_2() called')\n    \n    # if the joined function has already been called, do nothing\n    if phantom.get_run_data(key='join_format_2_called'):\n        return\n\n    # no callbacks to check, call connected block \"format_2\"\n    phantom.save_run_data(key='join_format_2_called', value='format_2', auto=True)\n\n    format_2(container=container, handle=handle)\n    \n    return",
                        "join_optional": [
                            "powershell_test",
                            "cmd_test",
                            "run_supplied_command"
                        ],
                        "join_start": 169,
                        "line_end": 183,
                        "line_start": 153,
                        "message": "Configuring now",
                        "name": "format",
                        "notes": "",
                        "number": 2,
                        "outPorts": [
                            "out-1"
                        ],
                        "parameters": [
                            {
                                "position": 0,
                                "type": "",
                                "value": "artifact:*.cef.destinationAddress"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1180,
                            "y": 120
                        },
                        "previous_function": "",
                        "previous_name": "format_2",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "format",
                        "status": "",
                        "template": "eventcreate /id 999 /D \"ended test for {0}\" /T INFORMATION /L application",
                        "title": "format",
                        "type": "coa.Format",
                        "warn": false,
                        "z": 64
                    }
                ]
            },
            "notes": ""
        },
        "schema": 3,
        "version": "3.5.188"
    },
    "create_time": "2018-05-30T20:31:18.317226+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ]
}